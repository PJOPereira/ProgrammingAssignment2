help
clearPushBack()
install.packages("swirl")
package_version("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
mydata <-  rnorm(100)
sd(mydata)
sd(x=mydata)
args(paste)
past("a", "b", sep=":")
past("a", "b", sep=":")
paste("a", "b", sep=":")
lm
search()
y <- 10
f <- function(x) {}
f <- function(x) {}
y <-  10
f <-  function(x) {
y <- 2
y^2 + g(x)
}
g <-  function(x) {
x*y
}
f(3)
g
f
y
x
nLL <- make.NegLogLik(normals, c(1, FALSE))
x <- seq(1.7, 1.9, len=100)
y <- sapply(x, nLL)
plot (x, exp(-(y-min(y))), type = "1")
nLL <- make.NegLogLik(normals, c(FALSE, 2))
x <- seq(0.5, 1.5, len=100)
y <- sapply(x, nLL)
plot (x, exp(-(y - min(y))), type = "1")
install.packages("swirl")
swirl()
install_from_swirl("R Programming")
packageVersion("swirl")
library(swirl)
rm(list=ls())
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
z
?c
z
c(z, 555, z)
z *2 +100
my_sqrt(sqrt(z-1))
my_sqrt <- sqrt(z-1)
my_sqrt
my_div(z/my_sqrt)
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(1,10)
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z *2 +1000
my_div
swirl()
swirl::main()
swirl::main()
swirl::main()
library(swirl)
main()
swirl()
help.start()
nxt()
info()
bye()
help.start()
swirl()
swirl()
help.start()
main()
library(swirl)
mai()
main()
swirl()
5+7
x <- 5+7
x
y <- x-3
y
c(1.1,9,3.14)
z <- c(1.1,9,3.14)
?c
z
n <- c(z,555,z)
c(z,555,z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
main()
help.start()
main()
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args()
args("name")
args("list.files")
args(list.files)
old.dir <- getwd()
dir.create(testdir)
dir.create("testdir"")
testdir
NULL
NULL
exit
stop()
exit
œ
œ
?
P
π
ø
¸
stop()
C
create.dir("testdir")
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files("testdir")
list.files()
file.exists()
file.exists(mytest.R)
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
?file.path
file.path("mytest3.R", fsep=folder1, fsep=folder2)
info()
file.path("mytest3.R", fsep = Users/paulopereira/testdir
)
file.path("mytest3.R", fsep = Users/paulopereira/testdir)
file.path( fsep = Users/paulopereira/testdir)
file.path( fsep = "Users/paulopereira/testdir")
file.patt("folder1","folder2")
file.path("folder1","folder2")
?dir.create
dir.create(file.path("testdir2","testdir3"))
dir.create(file.path('testdir2', 'testdir3'), recursive = FALSE)
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
old.dir
setwd(old.dir)
swril()
swirl()
bye()
bye()
function (X, FUN, ...) {}
x <-  list(a=1:5, b=rnorm(10))
x
?rnorm
a
lapply(x, mean)
b <- rnorm(10)
b
x <-  list( a=1:4, b= rnorm(10), c= rnorm(20,1), d= rnorm(100,5))
x
lapply(x, mean)
x <-  1:4
x
lapply(x, runif)
x
laaply( x, runif, min=0; max=10)
lapply( x, runif, min=0; max=10)
lapply( x, runif, min=0, max=10)
x <-  list(a= matrix(1:4,2,2), b=matrix(1:6, 3,2))
x
?elt
elt
elt()
function(elt)
{}
lapply(x, function(alt), elt[,1])
lapply(x, function(elt), elt[,1])
lapply(x, function(elt), elt[,1])
x
lapply(x, function(elt) elt[,1])
lapply(x, function(xtc) xtc[,1])
x <-  list(a=1:4, b=rnorm(10), c=rnorm(20,1), d=rorm(100,5)
x
x <- list(a=1:4, b=rnorm(10), c=rnorm(20,1), d=rorm(100,5)
lapply(x, mean)
x <- list(a=1:4, b=rnorm(10), c=rnorm(20,1), d=rorm(100,5))
x <- list(a = 1:4, b = rnorm(10), c=rnorm(20, 1), d=rorm(100,5))
x <- list(a = 1:4, b = rnorm(10), c=rnorm(20, 1), d=rnorm(100,5))
x
lapply(x, mean)
x <-  mstrix(rnorm(200), 20, 10)
x <-  matrix(rnorm(200), 20, 10)
x
apply(x, 2, mean)
apply(x, 1, sum)
x <-  matrix(rnorm(200), 20, 10)
apply(x, 1, quantile, probs=c(0.25,0.75))
a <-  array(rnorm(2*2*10), c(2,2,10))
a
mapply(rep, 1:4, 4:1)
noise <- function(n, mean, sd) {}
noise <- function(n, mean, sd) {
rnorm(n, mean, sd)
}
noise(5,1,2)
mapply(noise, 1:5, 1:5, 2)
x <- c(rnorm(10), runif(10), rnorm(10,1))
f <- gl(3,10)
f
tapply(x, f, mean)
tapply(x, f, mean, simplify = FALSE)
tapply(x, f, mean, simplify = TRUE)
tapply(x, f, range)
x <-  c(rnorm(10), runif(10), rnorm(10,1))
x
f <- gl(3,10)
f
split(x,f)
library(datasets)
head(airquality)
s <- split(airquility, airquility$Month)
s <- split(airquality, airquality$Month)
s
lapply(s, function(x), colMean(x‹[, c("Ozone", "Solar.R", "Wind")]))
lapply(s, function(x) colMean(x‹[, c("Ozone", "Solar.R", "Wind")]))
lapply(s, function(x) colMean(x‹[, c("Ozone", "Solar.R", "Wind")]))
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm=TRUE))
?str
str(rnorm)
mydata <- rnorm(100,2,1)
sd(mydata)
mydata
sd(mydata)
sd(x=mydata)
str(na)
str(sd)
sd(x=mydata, na.rm=FALSE)
myplot <- function(x,y, type="1", ...) { plot(x,y, type=type, ...)}
myplot(20, 50)
myplot(20, 50, 1)
printmessage <- function(x) {
if(is.na(x))
print("x is a missing value!")
else if(x>0)
print("x is great then zero")
else
print("x is less then or equal to zero")
}
printmessage(10)
printmessage <- function(x) {
if(is.na(x))
print("x is a missing value!")
else if(x>0)
print("x is great then zero")
else
print("x is less then or equal to zero")
invisible(x)
}
printmessage(10)
lm(y-x)
traceback()
debug(lm)
lm(y-x)
library(swirl)
swirld()
swirl()
5+7
q
exit
quit
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <-  sapply(flags, class)
class(cls_vect)
sum(flafs$orange)
sum(flags$orange)
flag_colors <- flags[,11:17]
head()
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <-  flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(3,4,5,5,5,6,6)
unique(c(3,4,5,5,5,6,6))
lappy(flags, unique)
lapply(flags, unique)
unique_vals <- lapply(flags, unique_vals)
unique_vals <- lapply(flags, unique)
unique_vals
lenght(unique_vals)
length(unique_vals)
sapply(unique_vals, lenght)
sapply(unique_vals, length)
sapply(unique_vals, unique)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
library(swirl)
swirl()
sapply(flags,unique)
vapply(flag, unique, numeric(1))
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$ladmasses, summary)
tapply(flags$population, flags$ladmass, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
summary(datset)
summary(dataset)
summary(iris)
type(dataset)
library(datasets)
?data
data("iris")
class(iris)
as.list(iris)
head(iris)
names(iris)
library(datasets)
data("iris")
class(iris)
iris
names(iris)
row.names(iris)
as.list(iris)
head(iris)
sum(iris$Petal.Length)
mean(iris$Petal.Length)
library(swirl)
swirl()
setwd("~/")
setwd("~/ProgrammingAssignment2")
